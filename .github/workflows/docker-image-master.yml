name: Docker Image CI - Master Branch

on:
  push:
    branches: [master]

jobs:
  build-ros-perception-x86-64:
    name: "Build ROS perception X86/64"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "ros:melodic-perception"
      ARCH: x86
      TARGET_TYPE: perception
      IMAGE_NAME: sonia_common
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Target version
        run: echo "TARGET_VERSION=release-$(sed -n -e 's/.*<version>\(.*\)<\/version>.*/\1/p' package.xml)" >> $GITHUB_ENV

      - name: Build the docker image (perception based)
        run: |
          docker build .  --tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Run Module Unit Test
        run: |
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-latest

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  build-ros-perception-cuda-x86-64:
    name: "Build ROS perception CUDA X86/64"
    runs-on: ubuntu-latest
    env:
      CUDA: "11.3.1"
      UBUNTU: "18.04"
      OPENCV: "3.4.14"
      ARCH: x86
      TARGET_TYPE: perception
      IMAGE_NAME: sonia_common_cuda
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Target version
        run: echo "TARGET_VERSION=release-$(sed -n -e 's/.*<version>\(.*\)<\/version>.*/\1/p' package.xml)" >> $GITHUB_ENV

      - name: Build the docker image (perception based)
        run: |
          docker build -f Dockerfile.cuda --tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE} .

      - name: Run Module Unit Test
        run: |
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-latest

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  build-ros-perception-arm64:
    name: "Build ROS perception ARM64"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "ros:melodic-perception"
      ARCH: arm64
      TARGET_TYPE: perception
      IMAGE_NAME: sonia_common
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Target version
        run: echo "TARGET_VERSION=release-$(sed -n -e 's/.*<version>\(.*\)<\/version>.*/\1/p' package.xml)" >> $GITHUB_ENV

      - name: Enable Docker Daemon Experimental Features
        run: |
          sudo rm /etc/docker/daemon.json
          echo '{"experimental": true , "cgroup-parent": "/actions_job" }' | sudo tee -a /etc/docker/daemon.json
          sudo service docker restart
          docker version

      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get update && sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (perception based)
        run: |
          docker build . --platform arm64 --tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Run Module Unit Test
        run: |
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-latest

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  build-ros-perception-l4t-arm64:
    name: "Build ROS perception L4T ARM64 (NVIDIA XAVIER)"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "docker.pkg.github.com/sonia-auv/l4t-ros-base/l4t_ros_base:arm64-perception-latest"
      ARCH: arm64
      TARGET_TYPE: perception-l4t
      IMAGE_NAME: sonia_common
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Target version
        run: echo "TARGET_VERSION=release-$(sed -n -e 's/.*<version>\(.*\)<\/version>.*/\1/p' package.xml)" >> $GITHUB_ENV

      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get update && sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build the docker image (perception based)
        run: |
          docker build . --tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Run Module Unit Test
        run: |
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Create Docker Image Tag
        run: |
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}
          docker tag build-${TARGET_VERSION}-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-latest

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  create-release:
    name: "Create Github Release"
    runs-on: ubuntu-latest
    needs:
      [
        build-ros-perception-x86-64,
        build-ros-perception-arm64,
        build-ros-perception-l4t-arm64,
      ]
    steps:
      - uses: actions/checkout@v2
      - name: Set Target version
        run: echo "TARGET_VERSION=release-$(sed -n -e 's/.*<version>\(.*\)<\/version>.*/\1/p' package.xml)" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag ${TARGET_VERSION}
          git push origin --tags

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TARGET_VERSION }}
          release_name: Release ${{ env.TARGET_VERSION }}
          body: |
            A new release for this package has been created
          draft: false
          prerelease: false

  notify-success:
    name: "Notify Slack - Success"
    runs-on: ubuntu-latest
    needs:
      [
        build-ros-perception-x86-64,
        build-ros-perception-arm64,
        build-ros-perception-l4t-arm64,
        create-release,
      ]
    if: success()
    steps:
      - name: Notify Slack Success
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: SUCCESS
          color: good

  notify-fail:
    name: "Notify Slack - Failure"
    runs-on: ubuntu-latest
    needs:
      [
          build-ros-perception-x86-64,
          build-ros-perception-cuda-x86-64,
          build-ros-perception-arm64,
          build-ros-perception-l4t-arm64,
          create-release,
      ]
    if: failure()
    steps:
      - name: Notify Slack Fail
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: FAILED
          color: danger
